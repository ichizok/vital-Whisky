Describe Async.Promise.Util
  Before all
    let Promise = vital#vital#import('Async.Promise')
  End

  Before
    let PromiseUtil = healthcheck#vital#import('Async.Promise.Util')
  End

  Describe .state()
    It returns 'pending' when the promise is pending
      let p = Promise.new({ -> '' })
      let s = PromiseUtil.state(p)
      Assert Equals(s, 'pending')
    End

    It returns 'fulfilled' when the promise is fulfilled
      let p = Promise.resolve()
      let s = PromiseUtil.state(p)
      Assert Equals(s, 'fulfilled')
    End

    It returns 'rejected' when the promise is rejected
      let p = Promise.reject()
      let s = PromiseUtil.state(p)
      Assert Equals(s, 'rejected')
    End
  End

  Describe .result()
    It returns v:null when the promise is pending
      let p = Promise.new({ -> '' })
      let r = PromiseUtil.result(p)
      Assert Equals(r, v:null)
    End

    It returns result when the promise is fulfilled
      let p = Promise.resolve('Hello')
      let r = PromiseUtil.result(p)
      Assert Equals(r, 'Hello')
    End

    It returns reason when the promise is rejected
      let p = Promise.reject('World')
      let r = PromiseUtil.result(p)
      Assert Equals(r, 'World')
    End
  End

  Describe .wait()
    It waits until the promise is fulfilled
      let p = Promise.new({ r -> timer_start(100, { -> r() }) })
      Assert Equals(PromiseUtil.state(p), 'pending')
      Assert Equals(PromiseUtil.wait(p), 'fulfilled')
      Assert Equals(PromiseUtil.state(p), 'fulfilled')
    End

    It waits until the promise is rejected
      let p = Promise.new({ _, r -> timer_start(100, { -> r() }) })
      Assert Equals(PromiseUtil.state(p), 'pending')
      Assert Equals(PromiseUtil.wait(p), 'rejected')
      Assert Equals(PromiseUtil.state(p), 'rejected')
    End

    It waits until the timeout has passed
      let p = Promise.new({ r -> timer_start(1000, { -> r() }) })
      Assert Equals(PromiseUtil.state(p), 'pending')
      Assert Equals(PromiseUtil.wait(p, 100), 'pending')
      Assert Equals(PromiseUtil.state(p), 'pending')
    End
  End

  Describe .sleep()
    It returns a promise which resolved after delay ms
      let p = PromiseUtil.sleep(100)
      Assert Equals(PromiseUtil.state(p), 'pending')
      sleep 200m
      Assert Equals(PromiseUtil.state(p), 'fulfilled')
    End
  End
End
