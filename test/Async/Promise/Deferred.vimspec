Describe Async.Promise.Deferred
  Before all
    let Promise = vital#vital#import('Async.Promise')
    let PromiseUtil = vital#vital#import('Async.Promise.Util')
  End

  Before
    let Deferred = healthcheck#vital#import('Async.Promise.Deferred')
  End

  Describe .new()
    It returns a deferred instance
      let d = Deferred.new()
      Assert True(Promise.is_promise(d))
      Assert KeyExists(d, 'resolve')
      Assert KeyExists(d, 'reject')
    End

    Context instance
      Before
        let d = Deferred.new()
      End

      Describe .resolve()
        It resolves the internal promise
          Assert Equals(PromiseUtil.state(d), 'pending')
          call d.resolve()
          Assert Equals(PromiseUtil.state(d), 'fulfilled')
        End
      End

      Describe .reject()
        It rejects the internal promise
          Assert Equals(PromiseUtil.state(d), 'pending')
          call d.reject()
          Assert Equals(PromiseUtil.state(d), 'rejected')
        End
      End
    End
  End
End
